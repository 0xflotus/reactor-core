/*
 * Copyright (c) 2011-2017 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
configure(rootProject) {
	apply plugin: 'org.asciidoctor.convert'

	asciidoctor {
		sources {
			include "index.asciidoc"
		}
		outputDir file("$buildDir/reactor-code/build/asciidoc")
		backends = ['html5', 'pdf']
		logDocuments = true
		options = [
				doctype: 'book'
		]
		attributes docinfo: '',
				toc2: '',
				'compat-mode': '',
				'allow-uri-read': '',
				stylesdir: "stylesheets/",
				stylesheet: 'golo.css',
				appversion: version,
				'source-highlighter': 'coderay'

		doLast {
			file("$outputDir/pdf/index.pdf").renameTo ("$outputDir/pdf/reactor-core-reference-guide-${version}.pdf")
		}
	}

	// Need https://github.com/Kotlin/dokka/issues/184 to be fixed to avoid "Can't find node by signature" log spam
	dokka {
		dependsOn {
			subprojects.collect {
				it.tasks.getByName("jar")
		}
		}
		doFirst {
			classpath = subprojects.collect { project -> project.jar.outputs.files.getFiles() }.flatten()
			classpath += files(subprojects.collect { it.sourceSets.main.compileClasspath })
		}
		moduleName = "reactor-core"
		outputFormat = "html"
		outputDirectory = "$buildDir/reactor-code/build/kdoc"

		processConfigurations = []
		sourceDirs = files (subprojects.collect {
			p -> return "$rootProject.rootDir/${p.name}/src/main/kotlin"
		})
		externalDocumentationLink {
			url = new URL("http://projectreactor.io/docs/core/release/api/")
		}
		externalDocumentationLink {
			url = new URL("http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/")
		}
	}

	task kdocZip(type: Zip, dependsOn: dokka) {
		baseName = 'reactor-core-kdoc'
		from("$buildDir/reactor-code/build/kdoc")
	}

	task docsZip(type: Zip, dependsOn: asciidoctor) {
	  baseName = 'reactor-core-docs'
	  from("$buildDir/reactor-code/build/asciidoc/pdf/reactor-core-reference-guide-${version}.pdf") { into ("docs/") }
	  from("$buildDir/reactor-code/build/asciidoc/html5/index.html") { into("docs/") }
	  from("$buildDir/reactor-code/build/asciidoc/html5/images") { into("images/") }
	}
}

